$font-stack: 'Montserrat', sans-serif;
$font-serif: 'PT Serif', serif;

$primary: #F5F3ED;
$primary-variant: #F5F3ED;
$secondary: #636D67;
$secondary-variant: #8D8C8B;
$tertiary: #917B15;
$tertiary-variant: #B0AA82;
$tertiary-variant-2: #D6C990;

$on-primary: #000;
$on-secondary: #F5F3ED;
$on-tertiary: #000;
$on-nav: #4F4F4F;

$on-background: #000;
$on-surface: #000;
$on-error: rgb(177, 177, 177);

$background-color: $primary;
$background-color-surface: #EAE2CD;
$background-color-error: #000;

$shadow-1: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
$shadow-2: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
$shadow-3: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
$shadow-4: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
$shadow-5: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);

$thumbnail-size: 150px;
$thumbnail-size-mobile: 100px;

$mobile-content-padding: 16px 32px;

// breakpoint mixins
// credit : https://glennmccomb.com/articles/useful-sass-scss-media-query-mixins-for-bootstrap/

$breakpoints: (
  xs: 576px,
  sm: 768px,
  md: 992px,
  lg: 1200px
);

$breakpoint: map-get($breakpoints, sm);

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint-value: map-get($breakpoints, $breakpoint);
        @media (min-width: $breakpoint-value) {
            @content;
        }
    } @else {
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint-value: map-get($breakpoints, $breakpoint);
        @media (max-width: ($breakpoint-value - 1)) {
                @content;
        }
    } @else {
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {
    @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
        $lower-breakpoint: map-get($breakpoints, $lower);
        $upper-breakpoint: map-get($breakpoints, $upper);
        @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
            @content;
        }
    } @else {
        @if (map-has-key($breakpoints, $lower) == false) {
            @warn 'Your lower breakpoint was invalid: #{$lower}.';
        }
        @if (map-has-key($breakpoints, $upper) == false) {
            @warn 'Your upper breakpoint was invalid: #{$upper}.';
        }
    }
}